import { useRouter } from "next/dist/client/router";
import Head from "next/head";
import { useEffect, useState } from "react";

export default function Room() {
  const { room, name } = useRouter().query;

  const [wsInstance, setWsInstance] = useState(null);

  const [players, setPlayers] = useState([]);

  const handleMessage = ({ type, payload }) => {
    console.log(type, players, payload);
    switch (type) {
      case "joined":
        setPlayers([{ name, character: "?" }, ...payload]);
        break;
      case "player-joined":
        setPlayers([...players, payload]);
        break;
      case "player-left":
        setPlayers(players.filter((p) => p.name !== payload.name));
        break;
      case "player-update-character":
        const player = players.find((p) => p.name === payload.name);
        player.character = payload.character;
        setPlayers([...players]);
        break;
    }
  };

  useEffect(() => {
    if (room && name) {
      const ws = new WebSocket(`ws://localhost:8080`);
      setWsInstance(ws);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [room, name]);

  useEffect(() => {
    if (wsInstance) {
      wsInstance.onopen = () => {
        wsInstance.send(
          JSON.stringify({ type: "join", payload: { room, name } })
        );
      };
      wsInstance.onmessage = (event) => {
        const message = JSON.parse(event.data);
        handleMessage(message);
      };
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [wsInstance, players]);

  function handleCharacterChange(e, player) {
    player.character = e.target.value;
    setPlayers([...players]);
    wsInstance.send(
      JSON.stringify({ type: "suggest-character", payload: { ...player } })
    );
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={"card"}>
        <h2>Sala</h2>
        <p>{room}</p>
      </div>

      {players
        .sort((a, b) => a.name.localeCompare(b.name))
        .map((player) => (
          <div key={player.name} className={"card"}>
            <h2>{player.name}</h2>
            {player.name === name ? (
              <p>You</p>
            ) : (
              <input
                type="text"
                value={player.character}
                onChange={(e) => handleCharacterChange(e, player)}
              />
            )}
          </div>
        ))}
    </div>
  );
}
